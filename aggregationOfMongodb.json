
//$group, $sum, $push
// db.test.aggregate([
//     { $group: { _id: "$age", total: { $sum: 1 }, data: { $push: '$$ROOT' } } },
//     {$project: {"data.name":1, "data.email":1, "data.phone":1, total:1}}

// ])




//more about $group and $project 
// db.test.aggregate([
//     {
//         $group: {
//             _id: null,
//             totalSalary: { $sum: "$salary" },
//             maxSalary: { $max: "$salary" },
//             minSalary: { $min: "$salary" },
//             avgSalary: { $avg: "$salary" },

//         },

//     },
//     {
//         $project: {
//             totalSalary: 1,
//             maxSalary: 1,
//             minSalary: 1,
//             averageSalary: "$avgSalary",
//             rangeBtwnMaxAndMin:{$subtract: ["$maxSalary","$minSalary"]}
//         }
//     }
// ])



//$group with $unwind 
// db.test.aggregate([
//     {
//         $unwind: "$interests"
//     },
//     {
//         $group: { _id: "$age", interestPerAge: { $push: "$interests" } }
//     },

// ])//another example 
// db.test.aggregate([
//     {$unwind: "$friends"},
//     {$group: { _id: "$friends", kotoBarTui:{$sum: 1}}}
//     ])


//$bucket, $sort, $limit 
// db.test.aggregate([
//     {
//         $bucket: {
//               groupBy: "$age",
//               boundaries: [ 20, 40, 60, 80 ],
//               default: "80 ar upore",
//               output: {
//                 "count": { $sum: 1 },
//                 "whoIs" : { $push: "$$ROOT" }
//               }
//             }
//     },
//     {
//         $sort: {count: -1}
//     },
//     {
//         $limit: 3
//     },
//     {
//         $project: {
//             count:1
//         }
//     }
//     ])



//db.getCollection("massive-data").createIndex({about:"text"})
// have Question db.getCollection("massive-data").find({$text: { $search: "dolor" }}).project({about:1})

// db.orders.aggregate([
//     {$lookup: {
//           from: "test",
//           localField: "userId",
//           foreignField: "_id",
//           as: "user"
//          }}
//     ])


// db.test.aggregate([
//     //stage-1
//     {$match: {gender:"Male", age:{$gte: 30}}},
//     //stage-2
//     {$project: {gender:1, age:1, name:1}}
//     ])


//if person is age out of 21 . so they are married true. and create another collection of 21 male person.
// db.test.aggregate([
//     //stage-1
//     {
//         $match: {
//             age: { $gt: 21 }

//         },
//     },
//     //stage-2
//     {
//         $addFields: {
//             isMarried: true,
//             causes: "you are out of 21 age. you can see your age"
//         }
//     },
//     //stage-3
//     {
//         $project: {
//             name: 1, age: 1,
//             isMarried: 1,
//             causes: 1

//         },
//     },
//     //stage-4
//     {
//         $sort: {
//             age: 1

//         }
//     },
//     //stage-5
//     {
//         $out: "outOf21AgeMalePerson"
//     }
// ])


//if person is age out of 21 . so they are married true. and merge data into this file i mean same file.
// db.test.aggregate([
//     //stage-1
//     {
//         $match: {
//             age: { $gt: 21 }

//         },
//     },
//     //stage-2
//     {
//         $addFields: {
//             isMarried: true,
//             causes: "you are out of 21 age. you can see your age"
//         }
//     },
//     //stage-3
//     {
//         $project: {
//             name: 1, age: 1,
//             isMarried: 1,
//             causes: 1

//         },
//     },
//     //stage-4
//     {
//         $sort: {
//             age: 1

//         }
//     },
//     //stage-5
//     {
//         $merge: "test"
//     }
// ])


//$group, $sum, $push 
// db.test.aggregate([
//     //stage-1
//     {
//         $group: {
//             _id: "$address.country",
//             countryAre: { $sum: 1 },
//             userByCountry: { $push: "$$ROOT" }
//         }
//     },
//     //stage-2
//     {
//         $project: {
//             _id: 1, countryAre: 1,
//             "userByCountry.name": 1,
//             "userByCountry.address": 1

//         }
//     },
//     //stage-3
//     {
//         $out: "filterByCountryData"
//     }
// ])



//explore more about group and project 
// db.test.aggregate([
//     //stage-1
//     {
//         $group: {
//             _id: null,
//             totalSalary: { $sum: "$salary" },
//             maxSalary: { $max: "$salary" },
//             minSalary: { $min: "$salary" },
//             avgSalary: { $avg: "$salary" },
//         }
//     },
//     {
//         $project: {
//             totalSalary: 1,
//             maxSalary: 1,
//             minSalary: 1,
//             averageSalary: "$avgSalary", //its mean refer
//             rangeBtwnMinAndMax: { $subtract: ["$maxSalary", "$minSalary"] }
//         }
//     }
// ])

//$group with $unwind 
// db.test.aggregate([
//     {
//         $unwind: "$friends"
//     },
//     {
//         $group: { _id: "$friends", tuiKoybarAchhis:{$sum:1} }
//     },
//     {
//         $project: {friends:1, tuiKoybarAchhis:1}
//     }
// ])



//another example
// db.test.aggregate([
//     {
//         $unwind: "$interests"
//     },
//     {
//         $group: {
//             _id: "$age",
//             interestPerAge: {$push: "$interests"}

//         }
//     },
//     {
//         $project: { interests: 1, age: 1, interestPerAge:1 }
//     },
//     {
//         $sort: { _id: 1 }
//     }
// ])



//$bucket $limit 
// db.test.aggregate([
//     {
//         $bucket: {
//               groupBy: "$age",
//               boundaries: [ 20,40,60,80 ],
//               default: "80 ar uporer manus",
//               output: {
//                 "count": { $sum: 1 },
//                 "whoIs" : { $push: "$$ROOT" }
//               }
//             }
//     },
//     {
//         $sort: {
//             count: 1
//         }
//     },
//     {
//         $limit: 4
//     },
//     {
//         $project: {
//             "whoIs.name":1,
//             "whoIs.age":1,
//             count:1
//         }
//     }
//     ])


//$facet that mean multiple pipeline. 
// db.test.aggregate([
//     {
//         $facet: {
//             [], //pipeline-1
//             [], //pipeline-2
//             [], //pipeline-3
//         }
//     }
//     ])



//$lookup 
// db.orders.aggregate([
//     {
//         $lookup: {
//               from: "test",
//               localField: "userId",
//               foreignField: "_id",
//               as: "user"
//              }
//     }
//     ])


//compound index and text index 
//create index
// db.getCollection("massive-data").createIndex({about:"text"})
//then search 
// db.getCollection("massive-data").find({$text: { $search: "dolor" }})